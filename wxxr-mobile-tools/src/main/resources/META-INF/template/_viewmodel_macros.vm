#macro(initViewGroups $model $viewGroups)
    private void initViewGroups(){
#set( $VGType = ${model.addImport("com.wxxr.mobile.core.ui.common.LazyLoadViewGroup")})
        ${VGType} vg = null;
#foreach($vg in $viewGroups) 
        vg = new ${VGType}("${vg.name}");
#if($vg.viewIds)
#foreach($vid in $vg.viewIds)
        vg.addViewId("$vid");
#end
        vg.setDefaultViewId("${vg.defaultViewId}");
#end
        this.${vg.name} = vg;
        add(this.${vg.name});
        
#end
    }
#end

#macro(initDataFields $model $dataFields)
    private void initDataFields() {
#set( $DType = ${model.addImport("com.wxxr.mobile.core.ui.common.DataField")})
#foreach($fld in $dataFields) 
        this.${fld.name}Field = new ${DType}<${fld.simpleBoxedType}>("${fld.name}");
        this.${fld.name}Field.setValueType(${fld.simpleType}.class);
#if(${fld.valueKey})
        this.${fld.name}Field.setValueKey(${fld.valueKey});
#end
        this.${fld.name}Field.setValue(this.${fld.name});
#if(${fld.binding})
#if(${fld.convertor})
        this.${fld.name}Field.setDomainModel(
            new ELDomainValueModel<${fld.simpleBoxedType},${fld.convertor.simpleSourceType}>(getEvaluatorContext(), "${fld.binding.expression}", this.${fld.name}Field,${fld.convertor.simpleSourceType}.class).
            setConvertor(this.${fld.convertor.name})
        );
#else
        this.${fld.name}Field.setDomainModel(new ELDomainValueModel<${fld.simpleBoxedType},${fld.simpleBoxedType}>(getEvaluatorContext(), "${fld.binding.expression}", this.${fld.name}Field,${fld.simpleBoxedType}.class));
#end
#end
        add(this.${fld.name}Field);        
#end
    }
#end

#macro(onCreateMethods $model $methods)
    private void callOnCreateMethods() {
#foreach($meth in $methods) 
        ${meth.name}();       
#end
    }
#end

#macro(initAttributeUpdaters $model $expressions)
    private void initFieldAttributes() {
#foreach($expr in $expressions)
#if(${expr.elexpress})
        addValueEvaluator(
            new ELAttributeValueEvaluator(getEvaluatorContext(), "${expr.expression}", "${expr.attributeKey}", getChild("${expr.field.name}"))
        );
#else
        AttributeKeys.updateAttribute("${expr.attributeKey}",getChild("${expr.field.name}"), "${expr.expression}");
#end
#end
    }
#end

#macro(registerBeans $model $beans)
    private void registerBeans() {
#foreach($bean in $beans)
#if(!${bean.service})
        registerBean("${bean.name}",this.${bean.name});
#end
#end
    }
#end

#macro(injectServices $model $bindings)
    private void injectServices() {
#set( $AppUtilType = ${model.addImport("com.wxxr.mobile.android.app.AppUtils")})
#foreach($srv in $bindings) 
        this.${srv.field.name} = ${AppUtilType}.getService(${srv.field.simpleType}.class);  
        registerService("${srv.field.name}",this.${srv.field.name});
#end
    }
#end

#macro(initBeanUpdaters $model $bindings)
    private void initBeanUpdaters() {
#foreach($binding in $bindings) 
        this.${binding.field.name}Updater = new ELBeanValueEvaluator<${binding.field.simpleBoxedType}>(getEvaluatorContext(), "${binding.expression}", #if(${binding.enabledWhen}) "${binding.enabledWhen}" #else null #end ,${binding.field.simpleBoxedType}.class);
        #if(${binding.enabledWhen})
        this.${binding.field.name}Updater.setDefaultValue(this.${binding.field.name});
        #end
#end
    }
#end

#macro(updateBindingBeans $model $bindings)
    private void updateBindingBeans() {
#foreach($binding in $bindings) 
    try {
        ${binding.field.simpleType} v_${binding.field.name} = this.${binding.field.name}Updater.doEvaluate();
        this.${binding.field.name} = v_${binding.field.name};
        registerBean("${binding.field.name}", this.${binding.field.name});
    }catch(Throwable t) {
        getLog().warn("Caught throwable when updating binding bean :[${binding.field.name}]", t);
        handleStartupException(t);
    }
    
#end
    }
#end


#macro(onShow $model $methods)
    @Override
    protected void onShow(IBinding<IView> binding) {
#if(${model.beanBindings})
    updateBindingBeans();
#end
#if(${model.serviceBindings})
       injectServices();
#end
#foreach($meth in $methods) 
#if(${meth.parameterTypes})
        ${meth.name}(binding); 
#else      
        ${meth.name}();
#end
#end
    }
#end

#macro(onHide $model $methods)
    @Override
    protected void onHide(IBinding<IView> binding) {
#foreach($meth in $methods) 
#if(${meth.parameterTypes})
        ${meth.name}(binding); 
#else      
        ${meth.name}();
#end
#end
    }
#end

#macro(onMenuShow $model $methods)
    @Override
    protected void onMenuShow(String menuId) {
#if(${model.beanBindings})
    updateBindingBeans();
#end
#foreach($meth in $methods) 
#if(${meth.parameterTypes})
        ${meth.name}(menuId); 
#else      
        ${meth.name}();
#end
#end
    }
#end

#macro(onMenuHide $model $methods)
    @Override
    protected void onMenuHide(String menuId) {
#foreach($meth in $methods) 
#if(${meth.parameterTypes})
        ${meth.name}(menuId); 
#else      
        ${meth.name}();
#end
#end
    }
#end

#macro(onDestroy $model $methods)
    @Override
    protected void onDestroy() {
#foreach($meth in $methods) 
        ${meth.name}();       
#end
#if(${model.convertorFields})
    destroyConvertors();
#end
    }
#end

#macro(onUIDestroy $model $methods)
    @Override
    protected void onContentViewDestroy() {
#foreach($meth in $methods) 
        ${meth.name}();       
#end
    }
#end

#macro(onUICreate $model $methods)
    @Override
    protected void onContentViewCreated() {
#foreach($meth in $methods) 
        ${meth.name}();       
#end
    }
#end


#macro(onDataChanged $model $methods)
    @Override
    protected void onDataChanged(ValueChangedEvent event) {
#foreach($meth in $methods) 
        ${meth.name}(event);       
#end
    }
#end



#macro(initMenus $model $menus)
    private void initMenus() {
#set( $MType = ${model.addImport("com.wxxr.mobile.core.ui.common.MenuBase")})
#foreach($menu in $model.menus)
        this.${menu.name} = new ${MType}("$menu.name");
#foreach($mid in $menu.items)
        this.${menu.name}.addCommand("$mid");
#end        
        add(this.${menu.name});

#end        
    }
#end

#macro(initCommands $model $commands)
    private void initCommands(){
 #set( $HType = ${model.addImport("com.wxxr.mobile.core.ui.common.AbstractUICommandHandler")})
 #set( $CMDType = ${model.addImport("com.wxxr.mobile.core.ui.common.UICommand")})
 #set( $NavType = ${model.addImport("com.wxxr.mobile.core.ui.common.SimpleNavigationDescriptor")})
 #set( $GuardType = ${model.addImport("com.wxxr.mobile.core.ui.common.SimpleProgressGuard")})
    $NavType navDesc = null;
    $CMDType item = null;
    $HType handler = null;
    $GuardType guard = null;
#foreach($cmd in $commands)
#if(${cmd.className})
    handler = new ${model.addImport(${cmd.className})}();
#else
    handler = new AbstractUICommandHandler() {           
        @Override
        public Object execute(InputEvent event) {
             return ${cmd.methodName}(event);
        }
    };
#end
#if(${cmd.navigations})
#foreach($nav in $cmd.navigations)
    navDesc = new SimpleNavigationDescriptor().setResult("${nav.result}");
#if(${nav.toPage})
    navDesc.setToPage("${nav.toPage}");
#end
#if(${nav.toView})
    navDesc.setToView("${nav.toView}");
#end
#if(${nav.toDialog})
    navDesc.setToDialog("${nav.toDialog}");
#end
#if(${nav.message})
    navDesc.setMessage("${nav.message}");
#end
    navDesc.setCloseCurrentView(${nav.closeCurrentView});
    navDesc.setKeepMenuOpen(${nav.keepMenuOpen});
#if(${nav.params})
#foreach($p in $nav.params)
    navDesc.addParameter("${p.name}","${p.value}");
#end
#end
    handler.addNavigation(navDesc);
#end
#end
#if(${cmd.securityConstraint})
#set( $SCType = ${model.addImport("com.wxxr.mobile.core.command.annotation.SecurityConstraintLiteral")})
    handler.addConstraint(new SecurityConstraintLiteral(#if(${cmd.securityConstraint.allowRoleString}) "${cmd.securityConstraint.allowRoleString}" #end ));    
#end
#if(${cmd.networkConstraint})
#set( $SCType = ${model.addImport("com.wxxr.mobile.core.command.annotation.NetworkConstraintLiteral")})
    handler.addConstraint(new NetworkConstraintLiteral(#if(${cmd.networkConstraint.allowConnectionTypeString}) "${cmd.networkConstraint.allowConnectionTypeString}" #end ));    
#end
#if(${cmd.progressGuard})
    guard = new SimpleProgressGuard();
    guard.setCancellable(${cmd.progressGuard.cancellable});
#if(${cmd.progressGuard.icon})
    guard.setIcon("${cmd.progressGuard.icon}");
#end
#if(${cmd.progressGuard.message})
    guard.setMessage("${cmd.progressGuard.message}");
#end
    guard.setSilentPeriod(${cmd.progressGuard.silentPeriod});
#if(${cmd.progressGuard.title})
    guard.setTitle("${cmd.progressGuard.title}");
#end
    handler.setProgressGuard(guard);
#end
    addUICommand("${cmd.name}", handler);
#if(${cmd.menuItems})
#set( $keys = ${model.addImport("com.wxxr.mobile.core.ui.common.AttributeKeys")})
#foreach($m in $cmd.menuItems)
    item = new UICommand("${m.name}");
    item.setCommandName("${cmd.name}");
    item.setAttribute(${keys}.title,"${m.label}");
#if($m.icon)
    item.setAttribute(${keys}.icon,"${m.icon}");
#end
    add(item);
#end
#end
#end
    }
#end 

#macro(initConvertors $model $convertors)
    private void initConvertors() {
#set( $map = ${model.addImport("java.util.Map")})
#set( $map = ${model.addImport("java.util.HashMap")})
        Map<String, Object> params = null;
#foreach($conv in $convertors)
        if(this.${conv.name} == null){
            this.${conv.name} = new ${conv.simpleType}();
        }
#if(${conv.params})
        params = new HashMap<String, Object>();
#foreach($p in ${conv.params})        
        params.put("${p.name}", ${p.stringValue});
#end
#else
        params = null;
#end
        this.${conv.name}.init(getUIContext(), params);
        
#end
    }
#end
  
#macro(destroyConvertors $model $convertors)  
    private void destroyConvertors() {
#foreach($conv in $convertors)
        if(this.${conv.name} != null){
            this.${conv.name}.destroy();
            this.${conv.name} = null;
        }
#end
    }
#end

#macro(init $model )
    @Override
    protected void onCreate() {
#if(${model.serviceBindings})
       injectServices();
#end
#if(${model.beanBindings})
    initBeanUpdaters();
#end
#if(${model.convertorFields})
    initConvertors();
#end

#if(${model.commands})
       initCommands();
#end
#if(${model.menus})
       initMenus();
#end
#if($model.dataFields)
       initDataFields();
#end
#if(${model.viewGroups})
       initViewGroups();
#end
#if(${model.onCreateMethods})
       callOnCreateMethods();
#end
#if(${model.beanFields})
       registerBeans();
#end
#if(${model.expressions})
       initFieldAttributes();
#end

    }
#end
   
