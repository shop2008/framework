/*
 * Generated code, don't modified !
 */
package ${model.pkgName};

import com.wxxr.mobile.android.ui.AndroidBindingType;
import com.wxxr.mobile.android.ui.IAndroidBindingDescriptor;
import com.wxxr.mobile.core.ui.api.IPage;
import com.wxxr.mobile.core.ui.api.IWorkbenchRTContext;
import com.wxxr.mobile.core.ui.api.TargetUISystem;
import com.wxxr.mobile.core.ui.common.AbstractPageDescriptor;
import ${model.viewModel.applicationId}.R;
#set( $clazz = ${model.addImport($model.viewModel.className)})
#set( $clazz = ${model.addImport($model.targetUI.className)})
#foreach($stmt in $model.imports)
import $stmt;
#end

/**
 * Generated by UI model generator
 *
 */
public class ${model.name} extends AbstractPageDescriptor {

	@Override
	protected IPage createPModel(IWorkbenchRTContext ctx) {
		${model.viewModel.name} page= new ${model.viewModel.name}();
		page.setName(getViewId());
		page.setEnableSelectionProvider(${model.viewModel.provideSelection});
		return page;
	}

	@Override
	protected void init() {
		setViewId("${model.viewModel.id}");
		setSingleton(${model.viewModel.singleton});
#if(${model.viewModel.description})
        setViewDescription("${model.viewModel.description}");
#end
		setHasToolbar(${model.viewModel.toolbarRequired});
#if(${model.viewModel.navigations})
        SimpleNavigationDescriptor navDesc = null;
#foreach($nav in ${model.viewModel.navigations}) 
        navDesc = new SimpleNavigationDescriptor().setResult("${nav.result}");
#if(${nav.toPage})
        navDesc.setToPage("${nav.toPage}");
#end
#if(${nav.toView})
        navDesc.setToView("${nav.toView}");
#end
#if(${nav.toDialog})
        navDesc.setToDialog("${nav.toDialog}");
#end
#if(${nav.message})
        navDesc.setMessage("${nav.message}");
#end
        navDesc.setCloseCurrentView(${nav.closeCurrentView});
        navDesc.setKeepMenuOpen(${nav.keepMenuOpen});
#if(${nav.params})
#foreach($p in $nav.params)
        navDesc.addParameter("${p.name}","${p.value}");
#end
#end
        addExceptionNavigation(navDesc);
        
#end
#end
#if(${model.targetUI})
		addBindingDescriptor(TargetUISystem.ANDROID, new IAndroidBindingDescriptor() {
			
			@Override
			public String getBindingViewId() {
				return getViewId();
			}
			
			@Override
			public Class<?> getTargetClass() {
#if(${model.targetUI.name})	
				return ${model.targetUI.name}.class;
#else
                return null;
#end
			}
			
			@Override
			public int getBindingLayoutId() {
				return ${model.layoutId};
			}

			@Override
			public AndroidBindingType getBindingType() {
				return AndroidBindingType.${model.bindingType};
			}
		});
#end
	}

}
