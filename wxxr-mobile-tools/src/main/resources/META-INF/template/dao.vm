/*

Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)     
                                                                           
This file is part of greenDAO Generator.                                   
                                                                           
greenDAO Generator is free software: you can redistribute it and/or modify 
it under the terms of the GNU General Public License as published by       
the Free Software Foundation, either version 3 of the License, or          
(at your option) any later version.                                        
greenDAO Generator is distributed in the hope that it will be useful,      
but WITHOUT ANY WARRANTY; without even the implied warranty of             
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              
GNU General Public License for more details.                               
                                                                           
You should have received a copy of the GNU General Public License          
along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.
*/
package ${entity.javaPackageDao};


import java.util.List;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
#if(${entity.toOneRelations})
import java.util.ArrayList;
#end
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.wxxr.mobile.core.log.api.Trace;
import com.wxxr.mobile.dao.AbstractDao;
import com.wxxr.mobile.dao.Property;
#if(${entity.toOneRelations})
import com.wxxr.mobile.dao.internal.SqlUtils;
#end
import ${schema.defaultJavaPackageDao}.DaoSession;
import com.wxxr.mobile.dao.internal.DaoConfig;
#if (${entity.incomingToManyRelations})
import com.wxxr.mobile.dao.query.Query;
import com.wxxr.mobile.dao.query.QueryBuilder;
#end

import ${entity.javaPackage}.${entity.className};


/** 
 * DAO for table ${entity.tableName}.
*/
public class ${entity.classNameDao} extends AbstractDao<${entity.className}, ${entity.pkType}> {
	private static final Trace log = Trace.register(${entity.classNameDao}.class);
    public static final String TABLENAME = "${entity.tableName}";

    /**
     * Properties of entity ${entity.className}.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
	#set($property_index=0)
	#foreach( $property in ${entity.propertiesColumns}) 
		public final static Property ${property.propertyName} = new Property(${property_index}, ${property.javaType}.class, "${property.propertyName}", ${property.primaryKey}, "${property.columnName}");
		#set($property_index=$property_index+1)#end};
    private DaoSession daoSession;	

    public ${entity.classNameDao}(DaoConfig config) {
        super(config);
    }
    
    public ${entity.classNameDao}(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }


    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'${entity.tableName}' (" + //
		#set($property_index=0)
		#foreach( $property in ${entity.propertiesColumns}) 
                "'${property.columnName}' ${property.columnType} #if($property.constraints) ${property.constraints} #end #if($property_index+1<$entity.propertiesColumns.size())," + #else );"); #end // $property_index: ${property.propertyName}
		#set($property_index=$property_index + 1)
		#end
		upgradeTable(db, ifNotExists);
    }

	private static void upgradeTable(SQLiteDatabase db, boolean ifNotExists) {
       Cursor cursor = db.rawQuery("select sql from sqlite_master sm where sm.type='table' and sm.tbl_name='${entity.tableName}';",null);
       if (cursor.getCount()<=0) {
    	   System.out.println("no result");
		   return ;
	   }
       String sql = cursor.moveToFirst()?cursor.getString(0):null;
       cursor.close();
       Map<String,String> map = new HashMap<String, String>();
	   #foreach($property in ${entity.propertiesColumns})
       map.put("${property.columnName}", "${property.columnType}");
       #end
       for (Entry<String,String> entry : map.entrySet()) {
		 if (!sql.contains(entry.getKey())) {
			db.execSQL("alter table "+TABLENAME+" add "+entry.getKey()+" "+entry.getValue()+";");
			log.info(String.format("Added column [%s] on Table[%s].", entry.getKey(),TABLENAME));
		}
       }
      
    }
    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'${entity.tableName}'";
        db.execSQL(sql);
    }

	
	    /** @inheritdoc */
    @Override
    public ${entity.pkType} getKey(${entity.className} entity) {
#if ($entity.pkProperty)
        if(entity != null) {
            return entity.get${helper.capitalize(${entity.pkProperty.propertyName})}();
        } else {
            return null;
        }
#else
        return null;
#end    
    }
	
	 /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
	#if(${entity.isProtobuf()})
		return true;
	#else
			return false;
	#end
    }
	  /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ${entity.className} entity, int offset) {
#set($property_index=0)
#foreach($property in ${entity.properties})
       entity.set${helper.capitalize(${property.propertyName})}(#if(!($property.notNull))cursor.isNull(offset + ${property_index}) ? null:#end#if($property.propertyType == "Byte")(byte) #end  #if($property.propertyType == "Date")new java.util.Date(#end cursor.get${helper.toCursorType(${property.propertyType.name()})}(offset + ${property_index})#if($property.propertyType == "Boolean") != 0#end#if($property.propertyType == "Date"))#end);
	   #set($property_index=$property_index+1)
#end
     }	

	   /** @inheritdoc */
    @Override
    protected ${entity.pkType} updateKeyAfterInsert(${entity.className} entity, long rowId) {
#if ($entity.pkProperty)
	#if ($entity.pkProperty.propertyType == "Long")
		#if(!$entity.protobuf)
        entity.set${helper.capitalize(${entity.pkProperty.propertyName})}(rowId);#end
        return rowId;
	#else
        return entity.get${helper.capitalize(${entity.pkProperty.propertyName})}();
	#end
#else
        // Unsupported or missing PK type
        return null;
#end
    }
    @Override
    public ${entity.className} readEntity(Cursor cursor, int offset) {
        ${entity.className} entity = new ${entity.className}();
        readEntity(cursor, entity, offset);
        return entity;
    }
	 
  
	
    @Override
    protected void bindValues(SQLiteStatement stmt, ${entity.className} entity) {
        stmt.clearBindings();
#set($property_index=0)
#foreach($property in ${entity.properties})
        ${property.javaType} ${property.propertyName} = entity.get${helper.capitalize(${property.propertyName})}();
        if (${property.propertyName} != null) {
            stmt.bind${helper.toBindType($property.propertyType.name())}($velocityCount, ${property.propertyName}#if($property.propertyType == "Boolean") ? 1l: 0l#end#if($property.propertyType == "Date").getTime()#end);
        }
	#set($property_index=$property_index+1)
#end
    }
	
    public ${entity.pkType} readKey(Cursor cursor, int offset) {
#if($entity.pkProperty)
        return #if(!$entity.pkProperty.notNull)cursor.isNull(offset + ${entity.pkProperty.ordinal}) ? null : #end#if($entity.pkProperty.propertyType == "Byte")(byte) #end#if($entity.pkProperty.propertyType == "Date")new java.util.Date(#end cursor.get${helper.toCursorType($entity.pkProperty.propertyType.name())}(offset + ${entity.pkProperty.ordinal})	#if($entity.pkProperty.propertyType == "Boolean") != 0 #end#if($entity.pkProperty.propertyType == "Date"))#end;
#else
        return null;
#end  
    }  
}